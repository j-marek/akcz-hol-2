AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Application Stack with ECS, ALB, API Gateway, and RDS PostgreSQL from Workshop Module 1-3"

Parameters:
  InitialsParam:
    Type: String
    Description: Your initials (to make resource names unique)
    Default: demo
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: Must contain only alphanumeric characters

  DBUsername:
    Type: String
    Description: Username for the RDS PostgreSQL instance
    Default: workshop_user
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters or underscores

  DBPassword:
    Type: String
    Description: Password for the RDS PostgreSQL instance
    Default: Workshop#123
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    ConstraintDescription: Must contain at least 8 characters

  # Add parameters for subnet selection from the default VPC
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First public subnet in the default VPC

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Second public subnet in the default VPC

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Default VPC ID

Resources:
  # Security Groups - Following Module 1.2
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${InitialsParam}-alb-sg"

  ECSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name
          Value: !Sub "${InitialsParam}-ecs-sg"

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSG
      Tags:
        - Key: Name
          Value: !Sub "${InitialsParam}-db-sg"

  # RDS DB Subnet Group for availability zones
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  # RDS PostgreSQL Instance - Following Module 1.3
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${InitialsParam}-postgres"
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DBSG
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 0 # Disable automated backups for this workshop
      DBName: !Sub "${InitialsParam}_db"
      StorageType: gp2
    DeletionPolicy: Delete # Change to Snapshot for production

  # ECS Cluster - Following Module 2.1
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${InitialsParam}-cluster"

  # ECS Task Execution Role - Required for Fargate tasks
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # CloudWatch Logs Group for ECS
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${InitialsParam}-app"
      RetentionInDays: 7

  # ECS Task Definition - Following Module 2.2
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${InitialsParam}-task"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub "${InitialsParam}-app"
          Image: nginx:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
            - Name: DB_HOST
              Value: !GetAtt RDSInstance.Endpoint.Address
            - Name: DB_NAME
              Value: !Sub "${InitialsParam}_db"
            - Name: DB_USER
              Value: !Ref DBUsername
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ALB Target Group - Following Module 2.3
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${InitialsParam}-tg"
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  # Application Load Balancer - Following Module 2.3
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${InitialsParam}-alb"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSG
      IpAddressType: ipv4

  # ALB Listener - Following Module 2.3
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service - Following Module 2.4
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub "${InitialsParam}-service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSG
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
      LoadBalancers:
        - ContainerName: !Sub "${InitialsParam}-app"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  # API Gateway - Following Module 3.1
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${InitialsParam}-api"
      Description: API for workshop application
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: app

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${ApplicationLoadBalancer.DNSName}"
        IntegrationResponses:
          - StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev

Outputs:
  DatabaseEndpoint:
    Description: The connection endpoint for the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${InitialsParam}-db-endpoint"

  LoadBalancerEndpoint:
    Description: The DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${InitialsParam}-alb-endpoint"

  ApiGatewayEndpoint:
    Description: The URL endpoint of the API Gateway
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/app"
    Export:
      Name: !Sub "${InitialsParam}-api-endpoint"
